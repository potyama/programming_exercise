グローバル変数は使わないほうが良い
-> ファイルを超えて変更ができてしまうから。

#defineはグローバル変数ではない、グローバル変数を超えたもの
しかし、#defineとかは使わない方が良い。

なぜ？
->#defineがプログラムの途中にあると#defineよりも後に書いたプログラムにしか適応されないからバグがでる

#ifdefとか#endifを使う時

・MacとかWindowsで呼び出すものが違う
->判別をすり替えるため

・Cのverを超えたりするため

#ifdefとか条件コンパイル
->条件によってコンパイルを変える

```
    #define DEBUG
    ...
    #ifdef DEBUG
           cout << "Debug: hensuu = " << hensuu << endl;
    #endif
```
DEBUGというマクロが定義されていたら、#ifdefと#endifの間の行が有効になる。
しかし、#define DEBUGがないと#ifdefと#endifで囲まれた行はないものとしてプリプロセッサに処理される。
結果、cout文はコンパイラから見ると元からなかったように見える。

```
#ifdef DEBUG
#define dbg fprintf
#else
#define dbg (void)
#endif

.....

dbg(stderr, "%s %s", a, b);
```

#define DEBUG されてたら fprintf(stderr, "%s %s", a, b);
#define DEBUG されてなかったら (void)(stderr, "%s %s", a, b);。これはカンマ演算子により stderr, "%s %s", a, b が評価された結果をvoidにキャスト（つまりなにもしない）

hsjoihs(@hsjoihs)さんに教えていただきました。ありがとうございます。
